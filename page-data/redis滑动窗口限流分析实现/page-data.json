{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/redis滑动窗口限流分析实现",
    "result": {"data":{"post":{"slug":"/redis滑动窗口限流分析实现","title":"Redis滑动窗口限流分析实现","date":"07.09.2021","tags":[{"name":"Redis","slug":"redis"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Redis滑动窗口限流分析实现\",\n  \"date\": \"2021-09-07T00:00:00.000Z\",\n  \"tags\": [\"Redis\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"\\u80CC\\u666F\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u9700\\u8981\\u5BF9\\u4E1A\\u52A1\\u8FDB\\u884C\\u56FA\\u5B9A\\u65F6\\u95F4\\u7A97\\u53E3\\u5185\\u9650\\u6D41, \\u5E76\\u4E14\\u8981\\u6C42\\u8DB3\\u591F\\u7CBE\\u786E (\\u5355\\u673A\\u7248\\u5168\\u90E8pass)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u9700\\u8981\\u9650\\u5236\\u7684\\u4E1A\\u52A1key\\u8303\\u56F4\\u7279\\u522B\\u5E7F, \\u4F1A\\u5BFC\\u81F4\\u6D88\\u8017\\u5927\\u91CF\\u7684\\u5185\\u5B58, \\u5728\\u5B58\\u50A8\\u4E0A\\u8981\\u5C3D\\u91CF\\u4FDD\\u8BC1\\u7CBE\\u7B80. \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u9AD8\\u6027\\u80FD(\\u81F3\\u5C11\\u652F\\u64915000TPS)\")), mdx(\"h1\", null, \"\\u5B9E\\u73B0\"), mdx(\"p\", null, \"\\u516C\\u53F8\\u7684\\u57FA\\u7840\\u8BBE\\u65BD\\u4E2D\\u76EE\\u524D\\u53EA\\u6709redis\\u53EF\\u4EE5\\u4FDD\\u8BC1\\u9AD8\\u6027\\u80FD\\u4E14\\u6613\\u4E8E\\u5B9E\\u73B0, \\u662F\\u6EE1\\u8DB3\\u5B9E\\u73B0\\u9700\\u8981\\u7684.  \"), mdx(\"p\", null, \"\\u7528zset\\\\hash\\u5B9E\\u73B0\\u601D\\u8DEF\\u4E0A\\u662F\\u57FA\\u672C\\u4E00\\u81F4\\u7684, \\u4F46\\u662F\\u6211\\u4EEC\\u4E1A\\u52A1\\u4E0A\\u5728\\u65F6\\u95F4\\u7A97\\u53E3\\u5185\\u53EF\\u80FD\\u4F1A\\u6253\\u5230\\u4E0A\\u5343\\u4E07\\u7684key\\u9700\\u8981\\u9650\\u6D41, \\u56E0\\u6B64\\u6211\\u4EEC\\u4F1A\\u5BF9\\u6BD4\\u4E00\\u4E0B\\u4E24\\u79CD\\u5B9E\\u73B0\\u4E0A\\u7684\\u5185\\u5B58\\u6D88\\u8017\\u548C\\u6027\\u80FD\"), mdx(\"h3\", null, \"\\u5185\\u5B58\\u6D88\\u8017\"), mdx(\"p\", null, \"zset\\u548Chash\\u5728redis\\u5B9E\\u73B0\\u4E2D, \\u5F53\\u5B58\\u50A8\\u7684\\u5143\\u7D20\\u6570\\u91CF\\u6216\\u957F\\u5EA6\\u5C0F\\u4E8E\\u56FA\\u5B9A\\u503C\\u65F6\\u90FD\\u662F\\u4F7F\\u7528Ziplist\\u6765\\u5B9E\\u73B0\\u7684, \\u5148\\u770B\\u4E00\\u4E0Bredis\\u4E2D\\u7684\\u914D\\u7F6E\\u53CA\\u5B9E\\u73B0:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"/* src/redis.h:313 Zip structure related defaults */\\n// \\u9ED8\\u8BA4hash\\u5BF9\\u8C61ziplist\\u7F16\\u7801\\u8F6C\\u4E3Aht\\u7F16\\u7801\\u7684\\u5B58\\u50A8\\u9608\\u503C(kv\\u5BF9\\u6570\\u91CF\\u6700\\u5927512,kv\\u6700\\u5927\\u957F\\u5EA664)\\n#define REDIS_HASH_MAX_ZIPLIST_ENTRIES 512\\n#define REDIS_HASH_MAX_ZIPLIST_VALUE 64\\n// \\u9ED8\\u8BA4zset\\u5BF9\\u8C61ziplist\\u7F16\\u7801\\u8F6C\\u4E3Askiplist\\u7F16\\u7801\\u7684\\u5B58\\u50A8\\u9608\\u503C(kv\\u5BF9\\u6570\\u91CF\\u6700\\u5927128,kv\\u6700\\u5927\\u957F\\u5EA664)\\n#define REDIS_ZSET_MAX_ZIPLIST_ENTRIES 128\\n#define REDIS_ZSET_MAX_ZIPLIST_VALUE 64\\n\\n/*\\n * src/object.c:275  \\u521B\\u5EFA\\u4E00\\u4E2A ZIPLIST \\u7F16\\u7801\\u7684\\u54C8\\u5E0C\\u5BF9\\u8C61\\n */\\nrobj *createHashObject(void) {\\n    unsigned char *zl = ziplistNew();\\n    robj *o = createObject(REDIS_HASH, zl);\\n    o->encoding = REDIS_ENCODING_ZIPLIST;\\n    return o;\\n}\\n\\n/*\\n * src/object.c:289 \\u521B\\u5EFA\\u4E00\\u4E2A ZIPLIST \\u7F16\\u7801\\u7684\\u6709\\u5E8F\\u96C6\\u5408\\n */\\nrobj *createZsetZiplistObject(void) {\\n    unsigned char *zl = ziplistNew();\\n    robj *o = createObject(REDIS_ZSET,zl);\\n    o->encoding = REDIS_ENCODING_ZIPLIST;\\n    return o;\\n}\\n\")), mdx(\"p\", null, \"Ziplist\\u63D2\\u5165\\u5143\\u7D20:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"// src/ziplist.c:1076\\n /* See if the entry can be encoded */\\n// \\u5C1D\\u8BD5\\u770B\\u80FD\\u5426\\u5C06\\u8F93\\u5165\\u5B57\\u7B26\\u4E32\\u8F6C\\u6362\\u4E3A\\u6574\\u6570\\uFF0C\\u5982\\u679C\\u6210\\u529F\\u7684\\u8BDD\\uFF1A\\n// 1)value \\u5C06\\u4FDD\\u5B58\\u8F6C\\u6362\\u540E\\u7684\\u6574\\u6570\\u503C\\n// 2)encoding \\u5219\\u4FDD\\u5B58\\u9002\\u7528\\u4E8E value \\u7684\\u7F16\\u7801\\u65B9\\u5F0F\\n// \\u65E0\\u8BBA\\u4F7F\\u7528\\u4EC0\\u4E48\\u7F16\\u7801\\uFF0C reqlen \\u90FD\\u4FDD\\u5B58\\u8282\\u70B9\\u503C\\u7684\\u957F\\u5EA6\\n// T = O(N)\\nif (zipTryEncoding(s,slen,&value,&encoding)) {\\n    /* 'encoding' is set to the appropriate integer encoding */\\n    reqlen = zipIntSize(encoding);\\n} else {\\n    /* 'encoding' is untouched, however zipEncodeLength will use the\\n     * string length to figure out how to encode it. */\\n    reqlen = slen;\\n}\\n\\n\\n/* Return bytes needed to store integer encoded by 'encoding' \\n *\\n * \\u8FD4\\u56DE\\u4FDD\\u5B58 encoding \\u7F16\\u7801\\u7684\\u503C\\u6240\\u9700\\u7684\\u5B57\\u8282\\u6570\\u91CF\\n *\\n * T = O(1)\\n */\\nstatic unsigned int zipIntSize(unsigned char encoding) {\\n\\n    switch(encoding) {\\n    case ZIP_INT_8B:  return 1;\\n    case ZIP_INT_16B: return 2;\\n    case ZIP_INT_24B: return 3;\\n    case ZIP_INT_32B: return 4;\\n    case ZIP_INT_64B: return 8;\\n    default: return 0; /* 4 bit immediate */\\n    }\\n\\n    assert(NULL);\\n    return 0;\\n}\\n\")), mdx(\"p\", null, \"Ziplist\\u63D2\\u5165kv\\u5143\\u7D20\\u65F6\\u90FD\\u4F1A\\u5224\\u65AD\\u80FD\\u5426\\u8F6C\\u6210\\u6574\\u6570\\u4EE5\\u8282\\u7EA6\\u5185\\u5B58.\"), mdx(\"p\", null, \"\\u9650\\u6D41\\u573A\\u666F\\u4E2D, \\u65E0\\u8BBAfield\\u8FD8\\u662Fvalue, \\u5FC5\\u7136\\u6709\\u4E00\\u4E2A\\u5B57\\u6BB5\\u7528\\u6765\\u5B58\\u50A8\\u8BF7\\u6C42\\u7684\\u65F6\\u95F4.\"), mdx(\"p\", null, \"\\u5728hash\\u4E2D\\u6211\\u4EEC\\u4F7F\\u7528field\\u5B58\\u50A8\\u8BF7\\u6C42\\u65F6\\u95F4\\u6233, value\\u7528\\u6765\\u8BB0\\u5F55\\u8BF7\\u6C42\\u6570. \\u5B9E\\u9645value\\u503C\\u7684\\u5B58\\u50A8\\u5360\\u7528\\u4E00\\u4E2A\\u5B57\\u8282\\u5C31\\u53EF\\u4EE5\\u6EE1\\u8DB3\\u9700\\u6C42\"), mdx(\"p\", null, \"\\u5728zset\\u4E2D\\u4F7F\\u7528score\\u5B58\\u50A8\\u8BF7\\u6C42\\u65F6\\u95F4\\u6233, member\\u5B58\\u50A8\\u4E00\\u4E2A\\u4EFB\\u610F\\u7684\\u552F\\u4E00\\u503C, \\u5B9E\\u9645\\u4E00\\u4E2A\\u5B57\\u8282\\u4E5F\\u53EF\"), mdx(\"p\", null, \"\\u56E0\\u4E3Ahash\\u5B9E\\u73B0\\u7528value\\u8BB0\\u5F55\\u8BF7\\u6C42\\u6570, \\u5982\\u679C\\u65F6\\u95F4\\u7A97\\u53E3\\u8303\\u56F4\\u5F88\\u5927, field\\u53EF\\u4EE5\\u7528\\u6765\\u6807\\u8BC6\\u5C0F\\u65F6\\u751A\\u81F3\\u5929, \\u4ECE\\u800C\\u51CF\\u5C11hash\\u5BF9\\u8C61\\u4E2D\\u5B58\\u50A8\\u7684kv\\u6570\\u91CF, \\u6240\\u4EE5\\u7528hash\\u5B9E\\u73B0\\u5C0F\\u4F18\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u5B9E\\u73B0\\u65F6\\u4E5F\\u53EF\\u4EE5\\u6839\\u636E\\u573A\\u666F\\u5BF9\\u65F6\\u95F4\\u6233\\u8FDB\\u884C\\u7CBE\\u7B80\\u4F18\\u5316, \\u6BD4\\u5982\\u4EE5\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"yyMMddHH\"), \"\\u5F62\\u5F0F\\u5B58\\u50A8, \\u51CF\\u5C11\\u6574\\u5F62\\u5B58\\u50A8\\u5360\\u7528\\u7684\\u5B57\\u8282\\u6570.\")), mdx(\"h3\", null, \"\\u64CD\\u4F5C\\u590D\\u6742\\u5EA6\"), mdx(\"h4\", null, \"Hash\\u5B9E\\u73B0\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"local now_timestamp = tonumber(ARGV[1])\\nlocal window_length = tonumber(ARGV[2])\\nlocal max_times = tonumber(ARGV[3])\\nlocal request_records = redis.call('HGETALL', KEYS[1])\\nif (request_records == nil or #request_records == 0)\\nthen\\n    redis.call('HINCRBY', KEYS[1], now_timestamp, 1)\\n    redis.call('EXPIRE', KEYS[1], window_length)\\n    return true\\nelse\\n    local window_times = 0\\n    local to_del_field = {}\\n    for i = 1, #request_records, 2 do\\n        if tonumber(request_records[i]) <= (now_timestamp - window_length)\\n        then\\n            table.insert(to_del_field, request_records[i])\\n        else\\n            window_times = window_times + request_records[i + 1]\\n        end\\n    end\\n    if #to_del_field > 0 then\\n        redis.call('HDEL', KEYS[1], unpack(to_del_field))\\n    end\\n    if max_times > window_times then\\n        redis.call('HINCRBY', KEYS[1], now_timestamp, 1)\\n        redis.call('EXPIRE', KEYS[1], window_length)\\n        return true\\n    else\\n        return false\\n    end\\nend\\n\")), mdx(\"p\", null, \"\\u6700\\u597D\\u7684\\u60C5\\u51B5\\u4E0B\\u5BF9\\u5E94key\\u6CA1\\u6709\\u8BF7\\u6C42\\u8BB0\\u5F55, \\u6267\\u884C\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HGETALL HINCRBY EXPIRE\"), \" \\u4E09\\u4E2A\\u65F6\\u95F4\\u590D\\u6742\\u5EA6O(1)\\u7684\\u64CD\\u4F5C\"), mdx(\"p\", null, \"\\u6700\\u574F\\u7684\\u60C5\\u51B5\\u4E0Bkey\\u4E2D(N-1)\\u4E2A\\u8BB0\\u5F55\\u90FD\\u662F\\u8FC7\\u671F\\u7684:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\u64CD\\u4F5C\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\u65F6\\u95F4\\u590D\\u6742\\u5EA6\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"HGETALL\\u83B7\\u53D6\\u5168\\u90E8\\u8BB0\\u5F55(\\u904D\\u5386ziplist)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"O(N)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"2\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\u7B5B\\u9009\\u8FC7\\u671F\\u8BB0\\u5F55(\\u904D\\u5386ziplist)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"O(N)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"3\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\u5220\\u9664\\u5168\\u90E8\\u8FC7\\u671Ffiled(\\u904D\\u5386ziplist)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"O(N^2) \", mdx(\"em\", {\n    parentName: \"td\"\n  }, \"\\u7406\\u8BBA\\u6700\\u574F\\u60C5\\u51B5\\u4E0BO(N^3), \\u5220\\u9664N-1\\u4E2A\\u5143\\u7D20\\u90FD\\u5BFC\\u81F4\\u538B\\u7F29\\u5217\\u8868\\u7EA7\\u8054\\u66F4\\u65B0\\u7684\\u60C5\\u51B5, \\u5F53\\u524D\\u573A\\u666Fkv\\u503C\\u957F\\u5EA6\\u56FA\\u5B9A, \\u56E0\\u6B64\\u4E0D\\u4F1A\\u51FA\\u73B0\\u8FD9\\u79CD\\u60C5\\u51B5\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"HINCRBY\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"O(N)  ziplist\\u5B9E\\u73B0\\u5148\\u5220\\u9664\\u540E\\u63D2\\u5165\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"5\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"EXPIRE\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"O(1)\")))), mdx(\"h4\", null, \"Zset\\u5B9E\\u73B0\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"local key = KEYS[1]\\nlocal now_timestamp = tonumber(ARGV[1])\\nlocal window_length = tonumber(ARGV[2])\\nlocal max_times = tonumber(ARGV[3])\\n\\n--1.\\u5220\\u9664\\u7A97\\u53E3\\u5185\\u8FC7\\u671F\\u5143\\u7D20\\nredis.call('ZREMRANGEBYSCORE',key,0,now_timestamp - window_length)\\n--2.\\u5224\\u65AD\\u662F\\u5426\\u8D85\\u9650\\nlocal requested_times = redis.call('zcard',key)\\nif  max_times > requested_times then\\n    -- 3.\\u589E\\u52A0\\u8BF7\\u6C42\\u8BB0\\u5F55\\n    redis.call('ZADD', key, now_timestamp, now_timestamp)\\n    -- 4.\\u5237\\u65B0\\u8FC7\\u671F\\u65F6\\u95F4\\n    redis.call('expire', key, window_length)\\n    return true\\nelse\\n    return false\\n\")), mdx(\"p\", null, \"\\u6700\\u597D\\u7684\\u60C5\\u51B5\\u4E0B\\u6267\\u884C\\u56DB\\u6B21O(1)\\u64CD\\u4F5C\"), mdx(\"p\", null, \"\\u6700\\u574F\\u7684\\u60C5\\u51B5\\u4E0Bkey\\u4E2D(N-1)\\u4E2A\\u8BB0\\u5F55\\u90FD\\u662F\\u8FC7\\u671F\\u7684:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\u64CD\\u4F5C\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\u65F6\\u95F4\\u590D\\u6742\\u5EA6\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ZREMRANGEBYSCORE\\u5220\\u9664\\u8FC7\\u671F\\u8BB0\\u5F55\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"O(N^2) ziplist\\u5B9E\\u73B0\\u5FAA\\u73AF\\u5220\\u9664\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"2\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ZCARD\\u7EDF\\u8BA1\\u8BF7\\u6C42\\u8BB0\\u5F55\\u6570\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"O(1)  ziplistLen(zl)/2\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"3\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ZADD\\u65B0\\u589E\\u4E00\\u6761\\u8BB0\\u5F55\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"O(N) ziplist\\u5148\\u5220\\u9664\\u540E\\u63D2\\u5165\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"EXPIRE\\u5237\\u65B0\\u8FC7\\u671F\\u65F6\\u95F4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"O(1)\")))), mdx(\"p\", null, \"\\u5355key\\u6570\\u636E\\u91CF\\u5F88\\u5C0F\\u7684\\u60C5\\u51B5\\u4E0B\\u4E24\\u79CD\\u5B9E\\u73B0\\u590D\\u6742\\u5EA6\\u5DEE\\u8DDD\\u4E0D\\u5927\"), mdx(\"h3\", null, \"\\u6027\\u80FD\\u6D4B\\u8BD5\"), mdx(\"p\", null, \"\\u6D4B\\u8BD5\\u73AF\\u5883\\u53CA\\u7528\\u4F8B\\u914D\\u7F6E: \"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"M1 macbook docker\\u5BB9\\u5668\\u5206\\u914D4c8g\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"redis\\u7248\\u672C6.2.6\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"100W\\u8BF7\\u6C42, 500\\u8FDE\\u63A5 (\\u4E0D\\u5F00\\u542Fpipeline\\\\\\u4E0D\\u7F13\\u5B58\\u811A\\u672C)\")), mdx(\"h4\", null, \"Hash\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"redis-benchmark -r 500000 -n 1000000  -a admin -c 500 eval \\\"local now_timestamp = tonumber(ARGV[1])\\nlocal window_length = tonumber(ARGV[2])\\nlocal max_times = tonumber(ARGV[3])\\nlocal request_records = redis.call('HGETALL', KEYS[1])\\nif (request_records == nil or #request_records == 0)\\nthen\\n    redis.call('HINCRBY', KEYS[1], now_timestamp, 1)\\n    redis.call('EXPIRE', KEYS[1], window_length)\\n    return true\\nelse\\n    local window_times = 0\\n    local to_del_field = {}\\n    for i = 1, #request_records, 2 do\\n        if tonumber(request_records[i]) <= (now_timestamp - window_length)\\n        then\\n            table.insert(to_del_field, request_records[i])\\n        else\\n            window_times = window_times + request_records[i + 1]\\n        end\\n    end\\n    if #to_del_field > 0 then\\n        redis.call('HDEL', KEYS[1], unpack(to_del_field))\\n    end\\n    if max_times > window_times then\\n        redis.call('HINCRBY', KEYS[1], now_timestamp, 1)\\n        redis.call('EXPIRE', KEYS[1], window_length)\\n        return true\\n    else\\n        return false\\n    end\\nend\\\" 1 __rand_int__ __rand_int__ 30000 2\\n\")), mdx(\"p\", null, \"\\u538B\\u6D4B\\u7ED3\\u679C:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"Summary:\\n  throughput summary: 27844.29 requests per second\\n  latency summary (msec):\\n          avg       min       p50       p95       p99       max\\n       17.133     1.864    16.623    26.959    32.511    65.535\\n\")), mdx(\"p\", null, \"\\u5185\\u5B58\\u5360\\u7528: 53.18M\"), mdx(\"h4\", null, \"Zset\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"redis-benchmark -r 500000  -n 1000000  -a admin -c 500 eval \\\"local key = KEYS[1]\\nlocal now_timestamp = tonumber(ARGV[1])\\nlocal window_length = tonumber(ARGV[2])\\nlocal max_times = tonumber(ARGV[3])\\nredis.call('ZREMRANGEBYSCORE',key,0,now_timestamp - window_length)\\nlocal requested_times = redis.call('zcard',key)\\nif  max_times > requested_times then\\n    redis.call('ZADD', key, now_timestamp, now_timestamp)\\n    redis.call('expire', key, window_length)\\n    return true\\nelse\\n    return false\\nend\\\" 1 __rand_int__ __rand_int__ 30000 2\\n\")), mdx(\"p\", null, \"\\u538B\\u6D4B\\u7ED3\\u679C:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"Summary:\\n  throughput summary: 30740.86 requests per second\\n  latency summary (msec):\\n          avg       min       p50       p95       p99       max\\n       15.549     1.288    14.967    24.879    30.623    57.503\\n\")), mdx(\"p\", null, \"\\u5185\\u5B58\\u5360\\u7528: 53.25M\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u6D4B\\u8BD5\\u4E0B\\u6765zset\\u5B9E\\u73B0\\u541E\\u5410\\u91CF\\u4F1A\\u9AD8\\u4E00\\u70B9, \\u4F46\\u5DEE\\u8DDD\\u4E0D\\u662F\\u5F88\\u5927, \\u5185\\u5B58\\u6D88\\u8017\\u4E5F\\u51E0\\u4E4E\\u76F8\\u540C \"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u538B\\u6D4B\\u4E2Dhash\\u4E5F\\u4F7F\\u7528\\u7684\\u65F6\\u95F4\\u6233, \\u4F46\\u53EF\\u4EE5\\u6839\\u636E\\u573A\\u666F\\u7075\\u6D3B\\u7684\\u53D8\\u66F4\\u4EE5\\u8282\\u7701\\u5185\\u5B58\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"背景 需要对业务进行固定时间窗口内限流, 并且要求足够精确 (单机版全部pass) 需要限制的业务key范围特别广, 会导致消耗大量的内存, 在存储上要尽量保证精简.  高性能(至少支撑5000TPS) 实现 公司的基础设施中目前只有redis…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/redis滑动窗口限流分析实现","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}