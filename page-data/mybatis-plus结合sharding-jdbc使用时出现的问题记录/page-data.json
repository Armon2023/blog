{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/mybatis-plus结合sharding-jdbc使用时出现的问题记录",
    "result": {"data":{"post":{"slug":"/mybatis-plus结合sharding-jdbc使用时出现的问题记录","title":"mybatisPlus结合sharding jdbc使用时出现的问题记录","date":"25.11.2021","tags":null,"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"mybatisPlus结合sharding jdbc使用时出现的问题记录\",\n  \"date\": \"2021-11-25T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"\\u80CC\\u666F\"), mdx(\"p\", null, \"\\u4F7F\\u7528mybatisplus\\u63D0\\u4F9B\\u7684\\u679A\\u4E3E\\u5E8F\\u5217\\u5316\\u529F\\u80FD, \\u5C06\\u679A\\u4E3E\\u503C\\u6620\\u5C04\\u4E3A\\u6570\\u636E\\u5E93\\u503C, \\u7ED3\\u5408sharding jdbc\\u4F7F\\u7528\\u65F6, \\u679A\\u4E3E\\u503C\\u65E0\\u6CD5\\u53CD\\u5E8F\\u5217\\u5316\\u8D4B\\u503C\\u5230\\u5BF9\\u8C61\\u4E2D\"), mdx(\"p\", null, \"mybatisplus\\u7248\\u672C 3.4.3.1\"), mdx(\"p\", null, \"sharding jdbc\\u7248\\u672C 4.1.1\"), mdx(\"h1\", null, \"\\u539F\\u56E0\"), mdx(\"p\", null, \"\\u76F4\\u63A5\\u6765\\u770Bmybatisplus\\u5BF9\\u679A\\u4E3E\\u7C7B\\u578B\\u7684\\u5904\\u7406\\u5668\\u7C7BMybatisEnumTypeHandler\"), mdx(\"h3\", null, \"\\u5E8F\\u5217\\u5316\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"/**\\n* \\u521D\\u59CB\\u5316\\u679A\\u4E3E\\u5904\\u7406\\u5668, \\u8BBE\\u7F6Evalue\\u7684fieldName\\u53CA\\u7C7B\\u578B\\\\value\\u503C\\u7684get\\u65B9\\u6CD5\\n*/\\npublic MybatisEnumTypeHandler(Class<E> enumClassType) {\\n        if (enumClassType == null) {\\n            throw new IllegalArgumentException(\\\"Type argument cannot be null\\\");\\n        }\\n        this.enumClassType = enumClassType;\\n        MetaClass metaClass = MetaClass.forClass(enumClassType, REFLECTOR_FACTORY);\\n        String name = \\\"value\\\";\\n        if (!IEnum.class.isAssignableFrom(enumClassType)) {\\n            name = findEnumValueFieldName(this.enumClassType).orElseThrow(() -> new IllegalArgumentException(String.format(\\\"Could not find @EnumValue in Class: %s.\\\", this.enumClassType.getName())));\\n        }\\n        this.propertyType = ReflectionKit.resolvePrimitiveIfNecessary(metaClass.getGetterType(name));\\n        this.getInvoker = metaClass.getGetInvoker(name);\\n    }\\n\\n    /**\\n     * \\u67E5\\u627E\\u6807\\u8BB0\\u6807\\u8BB0EnumValue\\u5B57\\u6BB5\\n     *\\n     * @param clazz class\\n     * @return EnumValue\\u5B57\\u6BB5\\n     * @since 3.3.1\\n     */\\n    public static Optional<String> findEnumValueFieldName(Class<?> clazz) {\\n        if (clazz != null && clazz.isEnum()) {\\n            String className = clazz.getName();\\n            return Optional.ofNullable(CollectionUtils.computeIfAbsent(TABLE_METHOD_OF_ENUM_TYPES, className, key -> {\\n                Optional<Field> fieldOptional = findEnumValueAnnotationField(clazz);\\n                return fieldOptional.map(Field::getName).orElse(null);\\n            }));\\n        }\\n        return Optional.empty();\\n    }\\n\\n    private static Optional<Field> findEnumValueAnnotationField(Class<?> clazz) {\\n        return Arrays.stream(clazz.getDeclaredFields()).filter(field -> field.isAnnotationPresent(EnumValue.class)).findFirst();\\n    }\\n\\n        /**\\n        * \\u53CD\\u5C04\\u8C03\\u7528get\\u65B9\\u6CD5\\u53D6\\u503C\\n        */\\n        private Object getValue(Object object) {\\n        try {\\n            return this.getInvoker.invoke(object, new Object[0]);\\n        } catch (ReflectiveOperationException e) {\\n            throw ExceptionUtils.mpe(e);\\n        }\\n    }\\n\\n\")), mdx(\"p\", null, \"\\u843D\\u5E93\\u7684\\u65F6\\u5019\\u5355\\u7EAF\\u7684\\u901A\\u8FC7\\u6CE8\\u89E3\\u914D\\u7F6E\\u53BB\\u62FF\\u5BF9\\u5E94\\u5B57\\u6BB5\\u7684\\u503C, \\u5B58\\u50A8\\u5230\\u6570\\u636E\\u5E93\\u65F6\\u662F\\u6B63\\u5E38\\u7684\"), mdx(\"h3\", null, \"\\u53CD\\u5E8F\\u5217\\u5316\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"@Override\\n    public E getNullableResult(ResultSet rs, String columnName) throws SQLException {\\n        Object value = rs.getObject(columnName, this.propertyType);\\n        if (null == value && rs.wasNull()) {\\n            return null;\\n        }\\n        return this.valueOf(value);\\n    }\\n\\n    @Override\\n    public E getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\\n        Object value = rs.getObject(columnIndex, this.propertyType);\\n        if (null == value && rs.wasNull()) {\\n            return null;\\n        }\\n        return this.valueOf(value);\\n    }\\n\\n    @Override\\n    public E getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\\n        Object value = cs.getObject(columnIndex, this.propertyType);\\n        if (null == value && cs.wasNull()) {\\n            return null;\\n        }\\n        return this.valueOf(value);\\n    }\\n\\n        private E valueOf(Object value) {\\n        E[] es = this.enumClassType.getEnumConstants();\\n        return Arrays.stream(es).filter((e) -> equalsValue(value, getValue(e))).findAny().orElse(null);\\n    }\\n\")), mdx(\"p\", null, \"\\u8C03\\u7528jdbc ResultSet\\u63A5\\u53E3\\u5B9A\\u4E49\\u7684getObject\\u65B9\\u6CD5\\u6765\\u83B7\\u53D6re\\u4E2D\\u5BF9\\u5E94\\u5B57\\u6BB5\\u7684\\u503C, \\u5E76\\u901A\\u8FC7valueOf\\u65B9\\u6CD5\\u5728\\u679A\\u4E3E\\u4E2D\\u8FDB\\u884C\\u5339\\u914D\"), mdx(\"p\", null, \"\\u914D\\u5408sharding jdbc\\u4F7F\\u7528\\u65F6, sharding\\u63D0\\u4F9B\\u7684jdbc\\u5B9E\\u73B0\\u4E2D \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"org.apache.shardingsphere.shardingjdbc.jdbc.unsupported.AbstractUnsupportedOperationResultSet\"), \"\\u8868\\u660E\\u5E76\\u4E0D\\u652F\\u6301getObject\\u65B9\\u6CD5, \\u5BFC\\u81F4\\u629B\\u5F02\\u5E38, \\u8FD9\\u4E00\\u70B9sharding\\u5B98\\u65B9\\u63CF\\u8FF0\\u7684\\u4E0D\\u662F\\u5F88\\u8BE6\\u7EC6, \\u4E5F\\u6CA1\\u6709\\u660E\\u786E\\u8BF4\\u660E\\u4E3A\\u4EC0\\u4E48\\u4E0D\\u5B9E\\u73B0\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"  @Override\\n    public final <T> T getObject(final int columnIndex, final Class<T> type) throws SQLException {\\n        throw new SQLFeatureNotSupportedException(\\\"getObject with type\\\");\\n    }\\n    \\n    @Override\\n    public final <T> T getObject(final String columnLabel, final Class<T> type) throws SQLException {\\n        throw new SQLFeatureNotSupportedException(\\\"getObject with type\\\");\\n    }\\n    \\n    @Override\\n    public final Object getObject(final String columnLabel, final Map<String, Class<?>> map) throws SQLException {\\n        throw new SQLFeatureNotSupportedException(\\\"getObject with map\\\");\\n    }\\n\")), mdx(\"p\", null, \"\\u770B\\u4E86\\u4E00\\u4E0Bsharding5.0.0\\u7248\\u672C\\u4E5F\\u6CA1\\u6709\\u5B9E\\u73B0\\u5B8C\\u5168\\u7684\\u652F\\u6301, \\u53EA\\u662F\\u652F\\u6301\\u4E86LocalDateTime\\\\LocalDate\\\\LocalTime\\u8FD9\\u4E09\\u79CD\\u7279\\u5B9A\\u7C7B\\u578B\"), mdx(\"p\", null, \"mybatisplus\\u76F8\\u5173pr: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/baomidou/mybatis-plus/pull/3854\"\n  }, \"https://github.com/baomidou/mybatis-plus/pull/3854\"), \" \\u5DF2\\u88AB\\u62D2\\u7EDD... \"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://shardingsphere.apache.org/document/4.1.0/en/manual/sharding-jdbc/unsupported-items/\"\n  }, \"https://shardingsphere.apache.org/document/4.1.0/en/manual/sharding-jdbc/unsupported-items/\"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"背景 使用mybatisplus提供的枚举序列化功能, 将枚举值映射为数据库值, 结合sharding jdbc使用时, 枚举值无法反序列化赋值到对象中 mybatisplus版本 3.4.3.1 sharding jdbc版本 4.1.1 原因 直接来看mybatisplus…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/mybatis-plus结合sharding-jdbc使用时出现的问题记录","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}